from fastapi import FastAPI, Depends, APIRouter, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from passlib.context import CryptContext

DATABASE_URL = "sqlite:///./test.db"  # Замените на вашу БД

# Создаем базу данных
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Модель пользователя
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)

# Создаем таблицы
Base.metadata.create_all(bind=engine)

# Настройка шифрования паролей
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

router = APIRouter()

class UserCreate(BaseModel):
    username: str
    password: str

class UserLogin(BaseModel):
    username: str
    password: str

class UserDatabase:
    def __init__(self, session: Session):
        self.session = session

    def create_user(self, username: str, password: str):
        hashed_password = pwd_context.hash(password)
        new_user = User(username=username, hashed_password=hashed_password)
        self.session.add(new_user)
        self.session.commit()
        self.session.refresh(new_user)
        return new_user

    def get_user(self, username: str):
        return self.session.query(User).filter(User.username == username).first()

    def verify_password(self, plain_password: str, hashed_password: str):
        return pwd_context.verify(plain_password, hashed_password)

@router.post("/register")
def register(user: UserCreate, db: Session = Depends(SessionLocal)):
    user_db = UserDatabase(db)
    existing_user = user_db.get_user(user.username)
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    new_user = user_db.create_user(user.username, user.password)
    return {"msg": "User registered successfully"}

@router.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(SessionLocal)):
    user_db = UserDatabase(db)
    user = user_db.get_user(form_data.username)
    if not user or not user_db.verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Invalid username or password")
    return {"access_token": user.username, "token_type": "bearer"}

@router.post("/logout")
def logout():
    return {"msg": "Logged out successfully"}

app = FastAPI()
app.include_router(router, prefix="/auth")

from fastapi.testclient import TestClient

def test_register_user(client: TestClient):
    response = client.post("/auth/register", json={"username": "testuser", "password": "testpass"})
    assert response.status_code == 200
    assert response.json() == {"msg": "User registered successfully"}

def test_register_existing_user(client: TestClient):
    client.post("/auth/register", json={"username": "testuser", "password": "testpass"})  # Регистрация первого раза
    response = client.post("/auth/register", json={"username": "testuser", "password": "newpass"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Username already registered"}

    def test_login_success(client: TestClient):
    client.post("/auth/register", json={"username": "testuser", "password": "testpass"})  # Регистрация
    response = client.post("/auth/token", data={"username": "testuser", "password": "testpass"})
    assert response.status_code == 200
    assert "access_token" in response.json()

def test_login_failure(client: TestClient):
    response = client.post("/auth/token", data={"username": "nonexistent", "password": "wrongpass"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid username or password"}


def test_logout(client: TestClient):
    response = client.post("/auth/logout")
    assert response.status_code == 200
    assert response.json() == {"msg": "Logged out successfully"}
